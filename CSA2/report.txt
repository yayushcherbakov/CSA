Студент Щербаков Ярослав, БПИ203.
Описание программы по АВС:
номер варианта студента - 111, номер условия задачи - 13, номер дополнительной функции - 8.

Полученное задание:
реализовать обобщённый массив различных растений, а именно:
- деревья, характеризутся названием растения (строка символов) и его возрастом (длинное целое число);
- кустарники, характеризуются названием растения (строка символов) и месяцем его цветения
(перечисляемый тип из 12 перечесляемых - месяца года);
- цветы, характеризуются названием растения(строка символов) и средой его обитания (перечисляемый тип,  состоящий из 3
сред обитания - домашние, дикие, садовые).

Дополнительная функция сортировки:
Упорядочить элементы контейнера по возрастанию используя сортировку с помощью разделения (Quick Sort). 
В качестве ключей для сортировки и других действий используются результаты функции, общей для всех
альтернатив.

Headers (6):
    flower.h
    shrub.h
    tree.h
    plant.h
    container.h
    rnd.h   
Sources(7):
    flower.cpp
    shrub.cpp
    tree.cpp
    plant.cpp
    container.cpp
    main.cpp
    rnd.cpp

Были реализованы следующие классы:
1) plant - базовый класс растений. Содержит имя расления, а также метод для вычисления
относительного количества гласных в имени.
2) flower - настедник plant. Реализует альтернативу "Цветок" и содержит характерный для него 
тип.
3) shrub - настедник plant. Реализует альтернативу "Кустарник" и содержит характерный для него 
месяц цветения.
4) tree - настедник plant. Реализует альтернативу "Дерево" и содержит характерный для него 
возраст.
5) container - класс, который хранит в себе набор растений, а также предоставляет возможность
сортировки своего содержимого. 
6) rnd - класс, реализующий генерацию случайных значений.

Конады для запуска:
1) Загрузка данных из файла
command: -f infile outfile
	-f - метка загрузки из файла
	infile - название файла с данными
	outfile - название файла с результатами
2) Герерация данных
command: -n number outfile
	-n - метка загрузки из файла
	number - количество случайно сгенеривованных ыобъектов
	outfile - название файла с результатами

В качестве метрики, определяющей эффективность работы программы,
выберем время сортировки элементов в контейнере.

Время выполнения сортировок для различных тестовых наборов данных:
1.1) 20 моделей растений (ввод из текста) - 0.000s
1.2) 20 моделей растений (ввод из текста) - 0.001s
1.3) 20 моделей растений (ввод из текста) - 0.000s

2.1) 20 моделей растений (программно сгенерированы) - 0.000s
2.2) 20 моделей растений (программно сгенерированы) - 0.000s
2.3) 20 моделей растений (программно сгенерированы) - 0.000s

3.1) 40 моделей растений (программно сгенерированы) - 0.001s
3.2) 40 моделей растений (программно сгенерированы) - 0.000s
3.3) 40 моделей растений (программно сгенерированы) - 0.001s

4.1) 80 моделей растений (программно сгенерированы) - 0.001s
4.2) 80 моделей растений (программно сгенерированы) - 0.001s
4.3) 80 моделей растений (программно сгенерированы) - 0.001s

5.1) 160 моделей растений (программно сгенерированы) - 0.002s
5.2) 160 моделей растений (программно сгенерированы) - 0.003s
5.3) 160 моделей растений (программно сгенерированы) - 0.002s

6.1) 320 моделей растений (программно сгенерированы) - 0.006s
6.2) 320 моделей растений (программно сгенерированы) - 0.007s
6.3) 320 моделей растений (программно сгенерированы) - 0.008s

7.1) 640 моделей растений (программно сгенерированы) - 0.024s
7.2) 640 моделей растений (программно сгенерированы) - 0.022s
7.3) 640 моделей растений (программно сгенерированы) - 0.023s

8.1) 1280 моделей растений (программно сгенерированы) - 0.082s
8.2) 1280 моделей растений (программно сгенерированы) - 0.092s
8.3) 1280 моделей растений (программно сгенерированы) - 0.091s

9.1) 2560 моделей растений (программно сгенерированы) - 0.336s
9.2) 2560 моделей растений (программно сгенерированы) - 0.326s
9.3) 2560 моделей растений (программно сгенерированы) - 0.339s

10.1) 5120 моделей растений (программно сгенерированы) - 1.349s
10.2) 5120 моделей растений (программно сгенерированы) - 1.323s
10.3) 5120 моделей растений (программно сгенерированы) - 1.373s

11.1) 10000 моделей растений (программно сгенерированы) - 5.086s
10.2) 10000 моделей растений (программно сгенерированы) - 5.142s
11.3) 10000 моделей растений (программно сгенерированы) - 5.244s

Выводы: работа программы, выполненная в статической типизации и ориентированная на
объектно-ориентированный подход, в среднем работает в 2,5 раза быстрее, чем при 
статической типизации и процедурном подходе. Алгоритм сортировки был реализован идентичным
образом в обеих программах. Обе программы были реализованы на языке С++. 
В сравнении с его предшественником — языком C — наибольшее внимание уделено поддержке
объектно-ориентированного программирования. Также причиной разницы выполнения тестов 
может являться то, что компиляторы языка С++ компилирует хорошо оптимизорованны для
компиляции кода написанного в ООП стиле, используя специальные конструкции языка.
В следствие чего на больших объемах данных программа в ООП стиле показывает более
быстрые результаты. Также на результаты тестов могло повлиять отсутствие опыта написания 
программ в процедурном стиле.
