//------------------------------------------------------------------------------
// container_Constr.cpp - содержит функции обработки контейнера
//------------------------------------------------------------------------------

#include "container.h"

//------------------------------------------------------------------------------
// Инициализация контейнера
void Init(container &c) {
    c.len = 0;
}

//------------------------------------------------------------------------------
// Ввод содержимого контейнера из указанного потока
void In(container &c, ifstream &ifst) {
    while(!ifst.eof()) {
        if((c.cont[c.len] = In(ifst)) != 0) {
            c.len++;
        }
    }
}

//------------------------------------------------------------------------------
// Случайный ввод содержимого контейнера
void InRnd(container &c, int size) {
    while(c.len < size) {
        if((c.cont[c.len] = InRnd()) != nullptr) {
            c.len++;
        }
    }
}

//------------------------------------------------------------------------------
// Вывод содержимого контейнера в указанный поток
void Out(container &c, ofstream &ofst) {
    ofst << "Container contains " << c.len << " elements." << endl;
    for(int i = 0; i < c.len; i++) {
        ofst << i << ": ";
        Out(*(c.cont[i]), ofst);
        ofst << '\n';
    }
}

void swap(plant** a, plant** b)
{
    plant* temp = *a;
    *a = *b;
    *b = temp;
}

//------------------------------------------------------------------------------
// Выбираем крайний правый элемент как опорный.
// Разбиение: перераспределение элементов в массиве таким образом,
// что элементы, меньшие опорного, помещаются перед ним, а большие или равные - после.
int partition(plant* arr[], int low, int high)
{
    plant* pivot = arr[high];// опорный элемент
    int i = (low - 1);  // индекс крайнего правого элемента, который меньше опорного

    for (int j = low; j <= high - 1; j++)
    {
        if (GetPartOfVowels(*arr[j]) < GetPartOfVowels(*pivot))
        {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

//------------------------------------------------------------------------------
// Быстрая сортировка массива растений
void quickSort(plant* arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
//------------------------------------------------------------------------------
// Быстрая сортировка растений в контейнере
void QuickSort(container &c) {
    quickSort(c.cont, 0, c.len - 1);
}
