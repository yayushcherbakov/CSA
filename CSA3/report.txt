Студент Щербаков Ярослав, БПИ203.
Описание программы по АВС:
номер варианта студента - 111, номер условия задачи - 13, номер дополнительной функции - 8.

Полученное задание:
реализовать обобщённый массив различных растений, а именно:
- деревья, характеризутся названием растения (строка символов) и его возрастом (длинное целое число);
- кустарники, характеризуются названием растения (строка символов) и месяцем его цветения
(перечисляемый тип из 12 перечесляемых - месяца года);
- цветы, характеризуются названием растения(строка символов) и средой его обитания (перечисляемый тип,  состоящий из 3
сред обитания - домашние, дикие, садовые).

Дополнительная функция сортировки:
Упорядочить элементы контейнера по возрастанию используя сортировку с помощью разделения (Quick Sort). 
В качестве ключей для сортировки и других действий используются результаты функции, общей для всех
альтернатив.
  
Sources(10):
    main.py
    container.py

    plant.py
    flower.py
    shrub.py
    tree.py

    flowerTypeEnum.py
    plantTypeEnum.py
    monthEnum.py

    rnd.py

Были реализованы следующие классы:
1) plant - базовый класс растений. Содержит имя расления, а также метод для вычисления
относительного количества гласных в имени.
2) flower - настедник plant. Реализует альтернативу "Цветок" и содержит характерный для него 
тип.
3) shrub - настедник plant. Реализует альтернативу "Кустарник" и содержит характерный для него 
месяц цветения.
4) tree - настедник plant. Реализует альтернативу "Дерево" и содержит характерный для него 
возраст.
5) container - класс, который хранит в себе набор растений, а также предоставляет возможность
сортировки своего содержимого. 
6) rnd - класс, реализующий генерацию случайных значений.
7) plantTypeEnum - класс, реализующий перечисление для типа растений.
8) flowerTypeEnum - класс, реализующий перечисление для типа цветов.
9) rnd - класс, реализующий перечисление для типа цветов.

Конады для запуска:
1) Загрузка данных из файла
command: -f infile outfile
	-f - метка загрузки из файла
	infile - название файла с данными
	outfile - название файла с результатами
2) Герерация данных
command: -n number outfile
	-n - метка загрузки из файла
	number - количество случайно сгенеривованных ыобъектов
	outfile - название файла с результатами

В качестве метрики, определяющей эффективность работы программы,
выберем время сортировки элементов в контейнере.

Время выполнения сортировок для различных тестовых наборов данных:
1.1) 20 моделей растений (ввод из текста) - 0.000s
1.2) 20 моделей растений (ввод из текста) - 0.000s
1.3) 20 моделей растений (ввод из текста) - 0.001s

2.1) 20 моделей растений (программно сгенерированы) - 0.001s
2.2) 20 моделей растений (программно сгенерированы) - 0.002s
2.3) 20 моделей растений (программно сгенерированы) - 0.000s

3.1) 40 моделей растений (программно сгенерированы) - 0.001s
3.2) 40 моделей растений (программно сгенерированы) - 0.000s
3.3) 40 моделей растений (программно сгенерированы) - 0.003s

4.1) 80 моделей растений (программно сгенерированы) - 0.002s
4.2) 80 моделей растений (программно сгенерированы) - 0.002s
4.3) 80 моделей растений (программно сгенерированы) - 0.002s

5.1) 160 моделей растений (программно сгенерированы) - 0.009s
5.2) 160 моделей растений (программно сгенерированы) - 0.005s
5.3) 160 моделей растений (программно сгенерированы) - 0.007s

6.1) 320 моделей растений (программно сгенерированы) - 0.027s
6.2) 320 моделей растений (программно сгенерированы) - 0.018s
6.3) 320 моделей растений (программно сгенерированы) - 0.011s

7.1) 640 моделей растений (программно сгенерированы) - 0.037s
7.2) 640 моделей растений (программно сгенерированы) - 0.036s
7.3) 640 моделей растений (программно сгенерированы) - 0.037s

8.1) 1280 моделей растений (программно сгенерированы) - 0.066s
8.2) 1280 моделей растений (программно сгенерированы) - 0.067s
8.3) 1280 моделей растений (программно сгенерированы) - 0.072s

9.1) 2560 моделей растений (программно сгенерированы) - 0.125s
9.2) 2560 моделей растений (программно сгенерированы) - 0.130s
9.3) 2560 моделей растений (программно сгенерированы) - 0.130s

10.1) 5120 моделей растений (программно сгенерированы) - 0.247s
10.2) 5120 моделей растений (программно сгенерированы) - 0.245s
10.3) 5120 моделей растений (программно сгенерированы) - 0.271s

11.1) 10000 моделей растений (программно сгенерированы) - 0.534s
10.2) 10000 моделей растений (программно сгенерированы) - 0.512s
11.3) 10000 моделей растений (программно сгенерированы) - 0.502s

Выводы: теоритически, причиной невысокой производительности Python является его 
динамическая природа и универсальность. Особенность в том, что Python — 
это интерпретируемый, а не компилируемый язык.
Его можно использовать как инструмент для решения разнообразнейших задач. 
Для достижения тех же целей можно попытаться поискать 
более производительные, лучше оптимизированные инструменты.
В нашем случае при малих данных скорость сортировки была медленне аналогов,
написанных на с и с++, но при больших данных реализация на Python выполнилась
в несколько раз быстрее.