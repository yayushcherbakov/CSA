Студент Щербаков Ярослав, БПИ203.
Описание программы по АВС:
номер варианта студента - 31

Полученное задание:
Вторая задача об Острове Сокровищ. Шайка пиратов под
предводительством Джона Сильвера высадилась на берег Острова Сокровищ.
Не смотря на добытую карту старого Флинта, местоположение сокровищ 
попрежнему остается загадкой, поэтому искать клад приходится практически
на ощупь. Так как Сильвер ходит на деревянной ноге, то самому бродить по
джунглям ему не с руки. Джон Сильвер поделил остров на участки, а пиратов
на небольшие группы. Каждой группе поручается искать клад на нескольких
участках, а сам Сильвер ждет на берегу. Группа пиратов, обшарив одну часть
острова, переходит к другой, еще необследованной части. Закончив поиски,
пираты возвращаются к Сильверу и докладывают о результатах. Требуется
создать многопоточное приложение с управляющим потоком, моделирующее
действия Сильвера и пиратов. При решении использовать парадигму
портфеля задач.


Описание модели. Портфель задач.

Взаимодействующие равные – модель, в которой исключен не занимающийся 
непосредственными вычислениями управляющий поток.
Распределение работ в таком приложении либо фиксировано заранее,
либо динамически определяется во время выполнения. Одним из 
распространенных способов динамического распределения работ является
«портфель задач». 

Портфель задач, как правило, реализуется с помощью разделяемой 
переменной, доступ к которой в один момент времени имеет только один процесc.
Вычислительная задача делится на конечное число подзадач. Как правило, каждая 
подзадача должна выполнить однотипные действия над разными данными. Подзадачи 
нумеруются, и каждому номеру определяется функция, которая однозначно отражает 
номер задачи на соответствующий ему набор данных. Создается переменная, которую 
следует выполнять следующей. Каждый поток сначала обращается к портфелю задач для 
выяснения текущего номера задачи, после этого увеличивает его, потом берет 
соответствующие данные и выполняет задачу, затем обращается 
к портфелю задач для выяснения следующего номера задачи.

Естественно должен быть предусмотрен механизм остановки процессов при исчерпывании 
всего множества задач, как в «производителях и потребителях».
То есть поток получает задачу из портфеля и пока задача остается не выполненной, 
поток ее решает, а затем снова получает задачу из портфеля.

Проблема реализации этого алгоритма в том, что доступ к портфелю задач должен 
быть безопасным. Если между взятием новой задачи и увеличением счетчика работа выполняющего 
их потока прервется, то некоторую задачу, возможно, отработают несколько потоков.


Алгоритм решения задания.

В условиях данной задачи пираты проводят поиск независимо друг от друга.
Поиск сокровища - подзадача, которую выполняют пираты.
Сильвер сидящий на берегу выдает координаты участка острова,
на котором будут вести поиски пираты.

Алгоритм работы:
Сильвер сидит на берегу и по очереди раздает координаты участков.
Пираты не могут одновременно получить координаты следующего участка,
и ожидают, если Сильвер занят другой группой.
Он запоминат последний выданый участок и в следующий раз выдает участок,
координата которого на единицу больше.
Группа пиратов подходит к Сильверу, получает координаты и выдвигается на поиск.
Затем возвращается, отдает результаты поиска Сильверу и получает следующие 
координаты.
После того, как участки закончатся, Сильвер просматривает результаты и
выясняет нахождения сокровища.

Структура проекта:
Headers (2):
    Logger.h
    Silver.h  
Sources(3):
    Logger.cpp
    Silver.cpp
    main.cpp

Были реализованы следующие классы:
1) Logger - класс для записи сообщений в консоль с защитой от одновременной записи несколькими потоками.
2) Silver - Класс пирата сильвера, который командует поиском. Он хранит карту и результаты поиска, 
а также раздает задания в виде координат для посика.
3) main - точка входа в программу. Также содержит функцию запуска потоков(группы пиратов).

Комады для запуска:
1) Загрузка данных из файла
command -p pirateGroupCount -f infile outfile
	-p - метка количества групп пиратов
	pirateGroupCount - количество групп пиратов
	-f - метка загрузки из файла
	infile - название файла с данными
	outfile - название файла с результатами
2) Герерация данных
command -p pirateGroupCount -n number outfile
	-p - метка количества групп пиратов
	pirateGroupCount - количество групп пиратов
	-n - метка загрузки из файла
	number - количество случайно сгенеривованных объектов
	outfile - название файла с результатами

Тестовые данные:
В текстовом файле подается последовательность нулей(место на карте без сокровища) и одна единица(сокровище):
Пример:
0
0
0
0
1
0
0

В качестве метрики, определяющей эффективность работы программы,
выберем время поиска сокровища на карте.

Тестирование проводилось на процессоре Intel Core i5-7200u:
- 2 физических ядра
- 4 логических ядра


Количество потоков/количество участков/время выполнения

	(1) Тесты при 100 участках на карте:
1 поток - 6.292 сек
2 потока - 3.295 сек
3 потока - 2.109 сек
4 потока - 1.788 сек
5 потоков - 1.544 сек
6 потоков - 1.269 сек
7 потоков - 1.172 сек
8 потоков - 0.841 сек
50 потоков - 0.2 сек
100 потоков - 0.228 сек
200 потоков - 0.287 сек
400 потоков - 0.348 сек
800 потоков - 0.711 сек
1000 потоков - 0.727 сек

	(2) Тесты при 1000 участках на карте:
1 поток - 62.123 сек
2 потока - 31.102 сек
3 потока - 20.962 сек
4 потока - 15.772 сек
5 потоков - 12.64 сек
6 потоков - 10.652 сек
7 потоков - 9.33 сек
8 потоков - 8.076 сек
50 потоков - 1.608 сек
100 потоков - 1.193 сек
200 потоков - 0.941 сек
400 потоков - 0.862 сек  
800 потоков - 1.259 сек
1000 потоков - 1.675 сек

	(3) Тесты при 2000 участках на карте:
1 поток - 124.252 сек
2 потока - 62.234 сек
3 потока - 41.627 сек
4 потока - 31.832 сек
5 потоков - 24.959 сек
6 потоков - 20.872 сек
7 потоков - 17.927 сек
8 потоков - 15.799 сек
50 потоков - 2.874 сек
100 потоков - 1.744 сек
200 потоков - 1.321 сек
400 потоков - 1.291 сек
800 потоков - 1.551 сек
1000 потоков - 1.642 сек

	(4) Тесты при 5000 участках на карте:
1 поток - 317.244 сек
2 потока - 157.375 сек
3 потока - 104.964 сек
4 потока - 78.613 сек
5 потоков - 63.573 сек
6 потоков - 53.581 сек
7 потоков - 53.581 сек
8 потоков - 46.638 сек
50 потоков - 6.569 сек
100 потоков - 3.662 сек
200 потоков - 2.389 сек
400 потоков - 2.508 сек
800 потоков - 2.613 сек
1000 потоков - 2.648 сек


Выводы: в ходе выполнения данного домашнего задания была разработанно многопоточное приложение 
с использованием парадигмы "портфеля задач". Для синхронизации потоков во время получения 
следующего задания использовался мьютекс из стандартной библиотеки с++, а также обертку lock_guard,
которая при создании блокирует мьютекс, а в деконструкторе разблокирует его. В ходе тестирования
было выявлено, что большее количество потоков, не означает более быстрое выполнение программы.
Создание потока - достаточно дорогостоящая операция. Задача должна быть достаточно сложной, чтобы время ее
вычисления было гараздо больше, чем время создания потока, а следовательно целесообразно.
В нашём случае мы заставляли засыпать поток на 50 мс после для симуляции сложных вычислений. 
Увеличивая количество потоков на фиксированном количестве участков мы видим уменьшение 
количества времени до тех пор, пока количество потоков не превысит половину количества участков. Затем 
увеличение времени при дальнейшем увеличении количества потоков. Следовательно, наиболее оптимальным 
количеством потоков будет половина от количества участков в контексте условий нашей задачи.   